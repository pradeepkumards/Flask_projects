swagger: "2.0"
info:
  description: "Password encryption and storing"
  version: "1.0.0"
  title: "Swagger password encryption"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v1/"
tags:
- name: "users"
  description: "users and passwords"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "groups"
  description: "Access to Petstore orders"
schemes:
- "https"
- "http"
paths:
  /user/:
    get:
      tags:
      - "users"
      summary: "list all user and password"
      description: ""
      operationId: password_encryption.api.password_handle.Users
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
#  /user/{username}:
#    get:
#      tags:
#      - "users"
#      summary: "list user and password"
#      description: ""
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "username"
#        in: "path"
#        description: "The name that needs to be fetched. Use user1 for testing. "
#        required: true
#        type: "string"
#      responses:
#        200:
#          description: "successful"
#        401:
#          description: "Unauthorized"
#        404:
#          description: "Not found"
#  /user/decrypt/{username}:
#    get:
#      tags:
#      - "users"
#      summary: "decrypt password of a user"
#      description: ""
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "username"
#        in: "path"
#        description: "The name that needs to be fetched. Use user1 for testing. "
#        required: true
#        type: "string"
#      responses:
#        200:
#          description: "successful"
#        401:
#          description: "Unauthorized"
#        404:
#          description: "Not found"
#  /user/add:
#    post:
#      tags:
#      - "users"
#      summary: "Add a new user and password"
#      description: ""
#      # operationId: "addUser"
#      consumes:
#      - "application/json"
#      - "application/xml"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - in: "body"
#        name: "body"
#        description: "User object that needs to be added"
#        required: true
#        schema:
#          $ref: "#/definitions/User"
#      responses:
#        405:
#          description: "Invalid input"
#  /user/update:
#    put:
#      tags:
#      - "users"
#      summary: "Add a new user and password"
#      description: ""
#      # operationId: "addUser"
#      consumes:
#      - "application/json"
#      - "application/xml"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - in: "body"
#        name: "body"
#        description: "User object that needs to be added"
#        required: true
#        schema:
#          $ref: "#/definitions/User"
#      responses:
#        405:
#          description: "Invalid input"
#  /user/delete/{username}:
#    delete:
#      tags:
#      - "users"
#      summary: "delete a new user and password"
#      description: ""
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - in: "path"
#        name: "username"
#        description: "User object that needs to be added"
#        required: true
#        type: "string"
#      responses:
#        405:
#          description: "Invalid input"
definitions:
  # Userdel:
  #   type: "object"
  #   properties:
  #     # id:
  #     #   type: "integer"
  #     #   format: "int64"
  #     user:
  #       type: "string"
  #       # format: "int64"
  #     group:
  #       type: "string"
  User:
    type: "object"
    properties:
      # id:
      #   type: "integer"
      #   format: "int64"
      user:
        type: "string"
        # format: "int64"
      group:
        type: "string"
      password:
        description: "password which needs to be encrypted"
        type: "string"

      encryptionType:
        type: "string"
        description: "encryption type"
        enum:
        - "md5"
        - "AES"
        - "delivered"
